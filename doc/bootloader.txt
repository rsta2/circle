BOOTLOADER

The Circle project has an integrated serial bootloader, which can be used to
speed-up the development process and to make it more comfortable. The bootloader
has been adapted from the well-known bootloader by David Welch.

To use the bootloader, you have to do the following:

1. You need a serial USB adapter (3.3V level) connected to GPIO14/15 (Broadcom
numbering) of your Raspberry Pi computer on one side and to your development
machine on the other.

2. On your development machine there must be a python3 interpreter (including the
python3-pyserial module) installed. You may also need the terminal program
"putty".

3. Add the following lines to the file Config.mk in the Circle root directory:

	SERIALPORT = /dev/ttyUSB0	(device of your serial USB adapter)
	FLASHBAUD = 115200		(baud rate for loading the application)
	USERBAUD = 115200		(baud rate used by the application)

By increasing FLASHBAUD you can speed-up to loading process very much. It
depends on your serial adapter, which baud rates are possible. Common values are
460800, 921600 or higher.

USERBAUD is the baud rate, used by the application itself, if it communicates
using the serial interface.

4. The Circle project libraries used in your application have to be build
manually using "./makeall" as described in the main README.md file.

5. You have to prepare a SD card, which starts your Raspberry Pi in bootloader
mode. Go to the boot/ subdirectory and enter:

	make all

After completion copy the files from boot/ to the SD card (copy the file
"config.txt" only for AArch64 operation), which must have a FAT partition.
Please note, that you have to repeat this step, if you change the parameter
FLASHBAUD in Config.mk. The built bootloader is specific for this baud rate. Put
the SD card into your Raspberry Pi, which is connected to your development
machine and power it on.

6. The bootloader starts when you go to the subdirectory of your application (or
sample program) in a shell and enter:

	make flash

7. If your application uses the serial interface itself, you can start the
terminal program "putty" directly from the shell. You have to enter "make
monitor" like you have done for "flash" before and putty should open with the
right communication parameters.

8. To start another development cycle, power off and on the Raspberry Pi, and
after rebuilding do again "make flash".


Using the New New Flash Tool "Flashy"
-------------------------------------

The above procedure describes flashing the device using the traditional python3
based flash tool.  Circle also includes a new flash tool "flashy" that provides some
improved features.  This tool is written in JavaScript and requires NodeJS to be installed.

* Unlike the old tool that just blasts at the serial port and hopes the bootloader
  is listening, the new tool pings the bootloader and waits for a response to ensures it's 
  ready for the transfer before sending it.

* It can automatically send a magic reboot string and wait for the device to become ready 
  before starting the transfer.  (Faster since pessimistic delay times aren't required)

* Once flashed, it can automatically switch into monitor mode (switching baud rates if 
  necessary) to view the output of the flashed program.

* It can reset the bootloader to recover from a previously cancelled transfer



To use the new flash tool:

1. Make sure you have NodeJS installed

2. Go to the `tools/flashy` sub-folder and run `npm install` to install the required 
   serial port module.

3. If you're currently using an old version of the bootloader, rebuild the latest
   version and copy it to the SD card. (Optional, works better with this)

4. In your Config.mk set the variable `USEFLASHY`, along with the other settings 
   described above:

        USEFLASHY = 1
        SERIALPORT = /dev/ttyUSB0
        FLASHBAUD = 115200
        USERBAUD = 115200
        REBOOTMAGIC = <magicstring>

5. Flash the device as per before:

        make flash

Here's what will happen:

* If the device is running a program that supports reboot magic, it will automatically
  reboot and the flash transfer will start when the bootloader is ready.

* If the device is off, or running a program that doesn't support reboot magic, just 
  power on or reset the device and the transfer will start when the bootloader is ready.

* If the device is on, but the bootloader hasn't loaded anything yet, or a previous
  flash operation was cancelled, the bootloader will be automatically restarted and a new 
  transfer initiated.  
  
This last point requires the new bootloader. If you're running the old bootloader you'll 
need to manually reset the device or do the transfer without acknowledgement (ie: use the
`--noack` switch which will transfer the file and just hope  the bootloader is listening).

For details on using this under WSL, see the [Windows build instructions](windows-build.txt)

